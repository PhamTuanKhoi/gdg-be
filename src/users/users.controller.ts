import { Controller, Get, Post, Body, Patch, Param, Delete, UseInterceptors, UploadedFile, Query } from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto'; 
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiConsumes, ApiBody } from '@nestjs/swagger'; 
import { FileInterceptor } from '@nestjs/platform-express'; 
import { Express } from 'express'
import { UserQueryDto } from './dto/query-user.dto'; 
import { diskStorageFileName } from 'src/upload/upload.utils';

@ApiBearerAuth()
@ApiTags('User') 
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Get()
  @ApiOperation({ summary: 'L·∫•y danh s√°ch user c√≥ ph√¢n trang, t√¨m ki·∫øm v√† s·∫Øp x·∫øp' })
  @ApiResponse({ status: 200, description: 'Danh s√°ch user ƒë∆∞·ª£c tr·∫£ v·ªÅ.' })
  async getAllUsers(@Query() queryDto: UserQueryDto) {
    return this.usersService.findAllUsers(queryDto);
  }

  @Post('create')
  @ApiOperation({ summary: 'T·∫°o user m·ªõi v·ªõi avatar' })
  @ApiResponse({ status: 201, description: 'User ƒë√£ ƒë∆∞·ª£c t·∫°o.' })
  @ApiResponse({ status: 409, description: 'Username, email ho·∫∑c phone ƒë√£ t·ªìn t·∫°i.' })
  @ApiConsumes('multipart/form-data') // üìå Quan tr·ªçng ƒë·ªÉ Swagger nh·∫≠n di·ªán file upload
  @ApiBody({
    description: 'Th√¥ng tin user v√† avatar',
    type: CreateUserDto,
  })
  @UseInterceptors(FileInterceptor('avatar', {
    storage: diskStorageFileName('user')
  }))
  async createUser(
    @Body() createUserDto: CreateUserDto,
    @UploadedFile() avatarFile?: Express.Multer.File,
  ) {
    return this.usersService.createUser(createUserDto, avatarFile);
  }

  @Patch(':id')
  @ApiOperation({ summary: 'C·∫≠p nh·∫≠t user' })
  @ApiResponse({ status: 200, description: 'User ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.' })
  @ApiResponse({ status: 404, description: 'User kh√¥ng t·ªìn t·∫°i.' })
  @ApiConsumes('multipart/form-data')
  @ApiBody({
    description: 'Th√¥ng tin user v√† avatar',
    type: UpdateUserDto,
  })
  @UseInterceptors(FileInterceptor('avatar', {
    storage: diskStorageFileName('user')
  }))
  async update(
    @Param('id') id: number,
    @Body() updateUserDto: UpdateUserDto,
    @UploadedFile() avatarFile?: Express.Multer.File,
  ) {
    return this.usersService.update(id, updateUserDto, avatarFile);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.usersService.remove(+id);
  }
}
